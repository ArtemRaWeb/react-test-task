{"ast":null,"code":"var _jsxFileName = \"/Users/artem/Github/react-test-task/src/components/BaseTable/BaseTable.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BaseTable = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [minValue, setMinValue] = useState(0);\n  const [maxValue, setMaxValue] = useState(100);\n  const cities = [\"New York\", \"London\", \"Paris\", \"Tokyo\", \"Sydney\", \"Moscow\", \"Berlin\", \"Rome\", \"Toronto\", \"Beijing\"];\n  const countries = [\"USA\", \"UK\", \"France\", \"Japan\", \"Australia\", \"Russia\", \"Germany\", \"Italy\", \"Canada\", \"China\"];\n  const generateRandomData = () => {\n    let data = [];\n    for (let i = 0; i < 20; i++) {\n      data.push({\n        name: `Person${i + 1}`,\n        city: cities[Math.floor(Math.random() * cities.length)],\n        country: countries[Math.floor(Math.random() * countries.length)],\n        \"income-amount\": Math.floor(Math.random() * 1000000),\n        \"total-revenue\": Math.floor(Math.random() * 1000000)\n      });\n    }\n    return data;\n  };\n  useEffect(() => {\n    setData(generateRandomData());\n  }, []);\n  const filteredData = data.filter(item => item.incomeAmount >= minValue && item.incomeAmount <= maxValue);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Income range:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: maxValue,\n        value: minValue,\n        onChange: event => setMinValue(Number(event.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: minValue,\n        max: maxValue,\n        value: maxValue,\n        onChange: event => setMaxValue(Number(event.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Country\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Income Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total Revenue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.incomeAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.totalRevenue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(BaseTable, \"cpZODqlnT0qyAz8GfWh+VjIZP5o=\");\n_c = BaseTable;\nexport default BaseTable;\nvar _c;\n$RefreshReg$(_c, \"BaseTable\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","BaseTable","_s","data","setData","minValue","setMinValue","maxValue","setMaxValue","cities","countries","generateRandomData","i","push","name","city","Math","floor","random","length","country","filteredData","filter","item","incomeAmount","children","type","min","max","value","onChange","event","Number","target","fileName","_jsxFileName","lineNumber","columnNumber","map","index","totalRevenue","_c","$RefreshReg$"],"sources":["/Users/artem/Github/react-test-task/src/components/BaseTable/BaseTable.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst BaseTable = () => {\n  const [data, setData] = useState([]);\n  const [minValue, setMinValue] = useState(0);\n  const [maxValue, setMaxValue] = useState(100);\n\n  const cities = [\"New York\", \"London\", \"Paris\", \"Tokyo\", \"Sydney\", \"Moscow\", \"Berlin\", \"Rome\", \"Toronto\", \"Beijing\"];\n  const countries = [\"USA\", \"UK\", \"France\", \"Japan\", \"Australia\", \"Russia\", \"Germany\", \"Italy\", \"Canada\", \"China\"];\n\n  const generateRandomData = () => {\n    let data = [];\n    for (let i = 0; i < 20; i++) {\n      data.push({\n        name: `Person${i + 1}`,\n        city: cities[Math.floor(Math.random() * cities.length)],\n        country: countries[Math.floor(Math.random() * countries.length)],\n        \"income-amount\": Math.floor(Math.random() * 1000000),\n        \"total-revenue\": Math.floor(Math.random() * 1000000),\n      });\n    }\n    return data;\n  };\n\n  useEffect(() => {\n    setData(generateRandomData());\n  }, []);\n\n  const filteredData = data.filter((item) => item.incomeAmount >= minValue && item.incomeAmount <= maxValue);\n\n  return (\n    <>\n      <label>\n        Income range:\n        <input\n          type=\"range\"\n          min=\"0\"\n          max={maxValue}\n          value={minValue}\n          onChange={(event) => setMinValue(Number(event.target.value))}\n        />\n        <input\n          type=\"range\"\n          min={minValue}\n          max={maxValue}\n          value={maxValue}\n          onChange={(event) => setMaxValue(Number(event.target.value))}\n        />\n      </label>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>City</th>\n            <th>Country</th>\n            <th>Income Amount</th>\n            <th>Total Revenue</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredData.map((item, index) => (\n            <tr key={index}>\n              <td>{item.name}</td>\n              <td>{item.city}</td>\n              <td>{item.country}</td>\n              <td>{item.incomeAmount}</td>\n              <td>{item.totalRevenue}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default BaseTable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}